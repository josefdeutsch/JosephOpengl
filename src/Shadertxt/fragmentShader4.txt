#version 450 core

layout (location = 0) out vec4 out_Colour;

layout (binding = 1) uniform sampler2D samplerTexture;
layout (binding = 2) uniform samplerCube enviroMap;

layout(location = 5) uniform vec3 lightColour;
layout(location = 6) uniform float reflectivity;
layout(location = 7) uniform float shineDamper;
layout(location = 8) uniform float alpha;

in vec2 uv;
in vec3 surfaceNormal;
in vec3 toLightVector;
in vec3 toCameraVector;
//in vec3 reflectedVector;

in vec3 RNormal;
in vec3 RPosition;
in vec3 RCameraPosition;




void main(void){

  vec3 unitNormal = (normalize(surfaceNormal));
  vec3 unitLightVector = normalize(toLightVector);
  float nDot1 = dot(unitNormal,unitLightVector);
  float brightness = max(nDot1,0.1);
  vec3 diffuse = (brightness) * lightColour;
  vec3 unitVectorToCamera = normalize(toCameraVector);
  vec3 lightDirection = -unitLightVector;
  vec3 reflectedLightDirection = (reflect(lightDirection,unitNormal));
  float specularFactor = dot(reflectedLightDirection,unitVectorToCamera);
  specularFactor = max(specularFactor,0);
  float dampedFactor = pow(specularFactor,shineDamper);
  vec3 finalSpecular = (dampedFactor) * lightColour* reflectivity;
  out_Colour = vec4(diffuse,1.0)* texture(samplerTexture,uv) + vec4(finalSpecular,1.0);

  vec3 I = normalize(RPosition - RCameraPosition);
  vec3 reflectedVector = reflect(I,normalize(RNormal));

  vec4 reflectedColour = texture(enviroMap, reflectedVector);

 out_Colour = mix(out_Colour, reflectedColour, alpha);










//
// vec4 reflectedColour = texture(enviroMap, reflectedVector);
















//  out_Colour = mix(out_Colour, reflectedColour, alpha);
}

